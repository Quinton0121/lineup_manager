def add_latecomer(latecomer_no, df, current_lineup, interviewed, lineup_history, page, lineup_display, progress_box, error_message, latecomer_input):  # Added latecomer_input parameter
    print(f"Attempting to add latecomer No: {latecomer_no} (type: {type(latecomer_no)})")
    error_message.value = ""  # Clear any previous error message
    latecomer_input.value = ""  # Clear the input field immediately after button press

    # Preprocess the DataFrame
    df = preprocess_google_sheet_data(df)

    # Validate input
    if not latecomer_no or not str(latecomer_no).strip():
        print("Validation failed: Empty or invalid input")
        error_message.value = "Please enter a valid number"
        page.update()
        return

    try:
        latecomer_no = int(float(str(latecomer_no)))
        print(f"Normalized latecomer No: {latecomer_no}")
    except ValueError:
        print("Validation failed: Cannot convert to integer")
        error_message.value = "Please enter a valid number"
        page.update()
        return

    # Refresh checked-in data
    checked_in, df = update_checked_in_number(None)
    print(f"Refreshed DataFrame with {checked_in} checked-in rows")

    # Clean and prepare DataFrame
    df["No"] = pd.to_numeric(df["No"], errors='coerce')
    clean_df = df.dropna(subset=["No"]).copy()
    clean_df["No"] = clean_df["No"].astype(int)
    print(f"Cleaned DataFrame 'No' values: {clean_df['No'].tolist()}")

    # Check if the person exists in the DataFrame
    person_row = clean_df[clean_df["No"] == latecomer_no]
    if person_row.empty:
        print(f"No {latecomer_no} not found in DataFrame")
        error_message.value = f"No {latecomer_no} not found"
        page.update()
        return

    # Check if the person has checked in
    checked_in_df = clean_df[clean_df["Checked In"].isin([True, "Yes", 1, "TRUE"])]
    latecomer_row = checked_in_df[checked_in_df["No"] == latecomer_no]
    if latecomer_row.empty:
        print(f"No {latecomer_no} is not checked in")
        error_message.value = f"No {latecomer_no} is not checked in"  # Updated message
        page.update()
        return

    # Check if the person is already interviewed or in the current lineup
    current_lineup_nos = [int(p["No"]) for p in current_lineup]
    if latecomer_no in interviewed:
        print(f"No {latecomer_no} is already interviewed")
        error_message.value = f"No {latecomer_no} is already interviewed"  # Updated message
        page.update()
        return
    elif latecomer_no in current_lineup_nos:
        print(f"No {latecomer_no} is already in the current lineup")
        error_message.value = f"No {latecomer_no} is already in the current lineup"  # Updated message
        page.update()
        return

    # If all checks pass, proceed with confirmation
    def confirm_jump(e):
        if e.control.text == "Yes":
            print(f"Confirmed: Adding No {latecomer_no} as latecomer")
            latecomer_data = {
                "No": latecomer_no,
                "中文姓名": latecomer_row["中文姓名"].values[0] if "中文姓名" in latecomer_row else "N/A",
                "timevalue": latecomer_row["timevalue"].values[0] if "timevalue" in latecomer_row else "N/A",
                "latecomer": True
            }
            current_lineup.append(latecomer_data)
            interviewed.append(latecomer_no)

            with open("config.json", "r") as config_file:
                config = json.load(config_file)
            config["current_lineup"] = current_lineup
            config["interviewed"] = interviewed
            if lineup_history:
                config["lineup_history"][-1]["people"] = current_lineup
            with open("config.json", "w") as config_file:
                json.dump(config, config_file, indent=4)
                print("Config updated with latecomer")

            lineup_display.controls = [
                ft.Text(f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}{' (Latecomer)' if person.get('latecomer', False) else ''}")
                for person in current_lineup
            ]
            print("Lineup display updated")

            progress_box.content.controls[3] = create_progress_bar(checked_in, len(interviewed))
            write_html()
            print("HTML updated")
            page.update()
        else:
            print("Jump in line canceled")
        dlg.open = False
        page.update()