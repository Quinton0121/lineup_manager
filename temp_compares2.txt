def on_undo_click(event):
    nonlocal interviewed, current_lineup, lineup_history, group_number, next_potential_lineup, can_undo
    print("Undo button clicked!")
    if not can_undo:
        print("Undo already performed - must click Lineup to enable undo again")
        error_message.value = "Undo already performed. Click Lineup to enable undo again."
        page.update()
        return
    if not lineup_history:
        print("Nothing to undo - lineup history is empty")
        error_message.value = "Nothing to undo."
        page.update()
        return

    shutil.copy("config.json", "backup_config_undo.json")
    print("Backed up config.json to backup_config_undo.json")

    last_group = lineup_history[-1]
    last_group_nos = [person["No"] for person in last_group["people"]]
    print(f"Undoing Group #{last_group['group_number']}: {last_group_nos}")

    lineup_history.pop()
    group_number -= 1

    # Update current_lineup
    if lineup_history:
        current_lineup[:] = lineup_history[-1]["people"]
    else:
        current_lineup.clear()

    # Rebuild interviewed list from remaining lineup_history and current_lineup
    interviewed[:] = []
    for group in lineup_history:
        interviewed.extend([person["No"] for person in group["people"]])
    interviewed.extend([person["No"] for person in current_lineup])
    interviewed = list(set(interviewed))  # Remove duplicates if any

    with open("config.json", "r") as config_file:
        config = json.load(config_file)
    config["interviewed"] = interviewed
    config["current_lineup"] = current_lineup
    config["lineup_history"] = lineup_history
    with open("config.json", "w") as config_file:
        json.dump(config, config_file, indent=4)
    print("Config.json updated after undo")

    # Update data.json (assuming it should reflect all interviewed numbers)
    with open('data.json', 'r') as data_file:
        data = json.load(data_file)
    data['line'] = data['line'][:-len(last_group_nos)]
    data['npg'] = data['npg'][:-1]
    with open('data.json', 'w') as data_file:
        json.dump(data, data_file, indent=4)
    print("Data.json updated after undo")

    # Update UI components
    lineup_display.controls = [
        ft.Text(f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}{' (Latecomer)' if person.get('latecomer', False) else ''}")
        for person in current_lineup
    ] if current_lineup else [ft.Text("No current lineup")]

    if len(lineup_history) >= 2:
        last_lineup_display.controls = [
            ft.Text(f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}{' (Latecomer)' if person.get('latecomer', False) else ''}")
            for person in lineup_history[-2]["people"]
        ]
    else:
        last_lineup_display.controls = [ft.Text("No previous lineup")]

    next_potential_lineup = get_next_lineup(df, npg, interviewed) if not isinstance(df, str) else []
    next_lineup_display.controls = [
        ft.Text(f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}")
        for person in next_potential_lineup
    ] if next_potential_lineup else [ft.Text("No next lineup available")]

    progress_box.content = ft.Column(
        [
            ft.Text("Check-in Status", size=20, weight="bold"),
            create_progress_bar(config["total_interview"], checked_in),
            ft.Text("Interview Status", size=20, weight="bold"),
            create_progress_bar(checked_in, len(interviewed)),
        ],
        spacing=10,
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
    )

    can_undo = False
    write_html()
    print("HTML updated after undo")
    error_message.value = ""
    page.update()