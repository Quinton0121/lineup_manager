def add_latecomer(latecomer_no, df, current_lineup, interviewed, lineup_history, page, lineup_display, progress_box, error_message, latecomer_input):
    print(f"Attempting to add latecomer No: {latecomer_no} (type: {type(latecomer_no)})")
    error_message.value = ""  # Clear any previous error message
    latecomer_input.value = ""  # Clear the input field immediately after button press

    # Preprocess the DataFrame
    df = preprocess_google_sheet_data(df)

    # Validate input
    if not latecomer_no or not str(latecomer_no).strip():
        print("Validation failed: Empty or invalid input")
        error_message.value = "Please enter a valid number"
        page.update()
        return

    try:
        latecomer_no = int(float(str(latecomer_no)))
        print(f"Normalized latecomer No: {latecomer_no}")
    except ValueError:
        print("Validation failed: Cannot convert to integer")
        error_message.value = "Please enter a valid number"
        page.update()
        return

    # Refresh checked-in data
    checked_in, df = update_checked_in_number(None)
    print(f"Refreshed DataFrame with {checked_in} checked-in rows")

    # Clean and prepare DataFrame
    df["No"] = pd.to_numeric(df["No"], errors='coerce')
    clean_df = df.dropna(subset=["No"]).copy()
    clean_df["No"] = clean_df["No"].astype(int)
    print(f"Cleaned DataFrame 'No' values: {clean_df['No'].tolist()}")

    # Check if the person exists in the DataFrame
    person_row = clean_df[clean_df["No"] == latecomer_no]
    if person_row.empty:
        print(f"No {latecomer_no} not found in DataFrame")
        error_message.value = f"No {latecomer_no} not found"
        page.update()
        return

    # Check if the person has checked in
    checked_in_df = clean_df[clean_df["Checked In"].isin([True, "Yes", 1, "TRUE"])]
    latecomer_row = checked_in_df[checked_in_df["No"] == latecomer_no]
    if latecomer_row.empty:
        print(f"No {latecomer_no} is not checked in")
        error_message.value = f"No {latecomer_no} is not checked in"
        page.update()
        return

    # Check if the person is already interviewed or in the current lineup
    current_lineup_nos = [int(p["No"]) for p in current_lineup]
    if latecomer_no in interviewed:
        print(f"No {latecomer_no} is already interviewed")
        error_message.value = f"No {latecomer_no} is already interviewed"
        page.update()
        return
    elif latecomer_no in current_lineup_nos:
        print(f"No {latecomer_no} is already in the current lineup")
        error_message.value = f"No {latecomer_no} is already in the current lineup"
        page.update()
        return

    # If all checks pass, proceed with confirmation
    def confirm_jump(e):
        if e.control.text == "Yes":
            print(f"Confirmed: Adding No {latecomer_no} as latecomer")
            latecomer_data = {
                "No": latecomer_no,
                "中文姓名": latecomer_row["中文姓名"].values[0] if "中文姓名" in latecomer_row else "N/A",
                "timevalue": latecomer_row["timevalue"].values[0] if "timevalue" in latecomer_row else "N/A",
                "latecomer": True  # Mark as latecomer
            }
            # Add to current_lineup
            current_lineup.append(latecomer_data)
            interviewed.append(latecomer_no)

            # Update config.json
            with open("config.json", "r") as config_file:
                config = json.load(config_file)
            config["current_lineup"] = current_lineup
            config["interviewed"] = interviewed

            # Update the last group in lineup_history instead of appending a new one
            if lineup_history:
                config["lineup_history"][-1]["people"] = current_lineup  # Update the last group's people list
                print(f"Updated last group in lineup_history (Group #{config['lineup_history'][-1]['group_number']}): {[p['No'] for p in current_lineup]}")
            else:
                # If no lineup_history exists yet, create the first group
                config["lineup_history"] = [{"group_number": 1, "people": current_lineup, "npg": len(current_lineup)}]
                print("Created first group in lineup_history with latecomer")

            with open("config.json", "w") as config_file:
                json.dump(config, config_file, indent=4)
                print("Config updated with latecomer in current group")

            # Update lineup_display with highlighting for latecomers
            lineup_display.controls = [
                ft.Text(
                    f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}{' (Latecomer)' if person.get('latecomer', False) else ''}",
                    color=ft.colors.RED if person.get('latecomer', False) else ft.colors.BLACK  # Highlight latecomers in red
                )
                for person in current_lineup
            ]
            print("Lineup display updated with latecomer highlighted")

            # Update progress bar
            progress_box.content.controls[3] = create_progress_bar(checked_in, len(interviewed))
            write_html()  # Update the HTML to reflect the new lineup
            print("HTML updated")
            page.update()
        else:
            print("Jump in line canceled")
        dlg.open = False
        page.update()

    print(f"Showing confirmation dialog for No: {latecomer_no}")
    dlg = ft.AlertDialog(
        title=ft.Text("Confirm Jump In Line"),
        content=ft.Text(f"Add No {latecomer_no} to the current lineup?"),
        actions=[
            ft.TextButton("Yes", on_click=confirm_jump),
            ft.TextButton("No", on_click=lambda e: setattr(dlg, "open", False) or page.update()),
        ],
        actions_alignment=ft.MainAxisAlignment.END,
    )
    page.overlay.append(dlg)
    dlg.open = True
    page.update()