import flet as ft
from components import create_progress_bar
from config import get_checkin_data, update_config_npg, get_init_time, update_config_init_time
from utils import excel_to_datetime, read_google_sheet
import json
import pandas as pd
import re
import webbrowser
import os

def first_page(page, url_input, result_text, submit_button, next_page_button, data_list_view):
    print("Rendering first page...")
    return ft.Column(
        [
            ft.Text("Google Sheet Reader", size=20, weight="bold"),
            url_input,
            submit_button,
            result_text,
            ft.Container(
                content=data_list_view,
                width=500,
                height=300,
                border=ft.border.all(1, ft.Colors.GREY_400),
                border_radius=5,
                padding=10,
            ),
            next_page_button,
        ],
        alignment="center"
    )

def update_checked_in_number(data, df=None):
    print("Updating checked-in number from Google Sheet...")
    if df is None:
        df = read_google_sheet("https://docs.google.com/spreadsheets/d/1YoOGKltmbHjstO6RIRQeZ3eA1A-YoexhyW7oyvolohg/edit?gid=1519050975#gid=1519050975")
    if isinstance(df, str):
        print(f"Failed to fetch sheet: {df}")
        return 0, None
    
    checked_in_count = len(df[df["Checked In"].isin([True, "Yes", 1, "TRUE"])])
    print(f"Found {checked_in_count} checked-in people")

    with open("config.json", "r") as f:
        config = json.load(f)
        config["number_of_checked_in"] = checked_in_count
    with open("config.json", "w") as f:
        json.dump(config, f, indent=4)
    return checked_in_count, df

def get_next_lineup(df, npg, interviewed):
    # Let the user know we're starting to fetch the next group
    print(f"Starting to fetch the next group of {npg} people...")

    # Step 1: Find people who checked in but haven't been interviewed yet
    checked_in = df["Checked In"].isin([True, "Yes", 1, "TRUE"])  # Who’s checked in?
    not_interviewed = ~df["No"].isin(interviewed)  # Who hasn’t been called yet?
    available_people = df[checked_in & not_interviewed]  # Combine the filters

    # Step 2: Sort them by check-in time (earliest first)
    sorted_people = available_people.sort_values("timevalue")
    
    # Step 3: Pick the top 'npg' people for the next group
    next_group = sorted_people.head(npg)
    
    # Step 4: Warn if we don’t have enough people
    if len(next_group) < npg:
        print(f"Warning: Only found {len(next_group)} people, but we need {npg}!")
    
    # Step 5: Return the group with just the info we need
    group_info = next_group[["No", "中文姓名", "timevalue"]].to_dict('records')
    print(f"Next group ready: {[person['No'] for person in group_info]}")
    return group_info

def write_html():
    # Announce that we’re updating the HTML file
    print("Updating the HTML file now...")

    # Step 1: Load the latest config and data files
    with open('config.json', 'r') as config_file:
        config = json.load(config_file)
    with open('data.json', 'r') as data_file:
        data = json.load(data_file)

    # Step 2: Get the previous group for the front cards (before flip)
    front_numbers = ["000", "000", "000", "000", "000", "000"]  # Default empty group
    if len(data["npg"]) >= 2:  # Check if we have at least two groups
        prev_size = data["npg"][-2]  # How big was the previous group?
        current_start = len(data["line"]) - data["npg"][-1]  # Where the current group starts
        prev_start = current_start - prev_size  # Where the previous group starts
        for i in range(min(prev_size, 6)):  # Fill up to 6 slots
            if prev_start + i >= 0 and prev_start + i < len(data["line"]):
                front_numbers[i] = str(data['line'][prev_start + i])  # Grab the number
    elif len(data["npg"]) == 1:
        print("Only one group so far, front stays all zeros.")
    
    # Unpack the previous group numbers
    front1, front2, front3, front4, front5, front6 = front_numbers
    print(f"Front cards (before flip) will show: {front_numbers}")

    # Step 3: Get the current group for the back cards (after flip)
    current_numbers = [str(person["No"]) for person in config["current_lineup"]]  # Current group from config
    current_count = len(current_numbers)  # How many people in this group?
    back_numbers = current_numbers + ["000"] * (6 - current_count)  # Pad with zeros to 6
    back1, back2, back3, back4, back5, back6 = back_numbers  # Unpack for clarity
    print(f"Back cards (after flip) will show: {back_numbers}")

    # Step 4: Read the current HTML file
    with open('index.html', 'r', encoding='utf-8') as html_file:
        html_content = html_file.read()
    print(f"Current HTML snippet (before changes): {html_content[html_content.index('id=\"Qoos1\"'):html_content.index('id=\"Qoos12\"')+50]}")

    # Step 5: Update the numbers in the HTML, keeping the <h1> tags intact
    html_content = re.sub(r'(id="Qoos1">)[^<]*(</h1>)', r'\1' + front1 + r'\2', html_content)  # Front card 1
    html_content = re.sub(r'(id="Qoos2">)[^<]*(</h1>)', r'\1' + back1 + r'\2', html_content)   # Back card 1
    html_content = re.sub(r'(id="Qoos3">)[^<]*(</h1>)', r'\1' + front2 + r'\2', html_content)  # Front card 2
    html_content = re.sub(r'(id="Qoos4">)[^<]*(</h1>)', r'\1' + back2 + r'\2', html_content)   # Back card 2
    html_content = re.sub(r'(id="Qoos5">)[^<]*(</h1>)', r'\1' + front3 + r'\2', html_content)  # Front card 3
    html_content = re.sub(r'(id="Qoos6">)[^<]*(</h1>)', r'\1' + back3 + r'\2', html_content)   # Back card 3
    html_content = re.sub(r'(id="Qoos7">)[^<]*(</h1>)', r'\1' + front4 + r'\2', html_content)  # Front card 4
    html_content = re.sub(r'(id="Qoos8">)[^<]*(</h1>)', r'\1' + back4 + r'\2', html_content)   # Back card 4
    html_content = re.sub(r'(id="Qoos9">)[^<]*(</h1>)', r'\1' + front5 + r'\2', html_content)  # Front card 5
    html_content = re.sub(r'(id="Qoos10">)[^<]*(</h1>)', r'\1' + back5 + r'\2', html_content)  # Back card 5
    html_content = re.sub(r'(id="Qoos11">)[^<]*(</h1>)', r'\1' + front6 + r'\2', html_content) # Front card 6
    html_content = re.sub(r'(id="Qoos12">)[^<]*(</h1>)', r'\1' + back6 + r'\2', html_content)  # Back card 6

    # Step 6: Swap card colors (red to blue, blue to red)
    last_front_color = config.get("last_front_color", "#ee6b6e")  # What color was front last time? Default red
    new_front_color = "#2980b9" if last_front_color == "#ee6b6e" else "#ee6b6e"  # Swap it
    new_back_color = "#ee6b6e" if new_front_color == "#2980b9" else "#2980b9"     # Opposite for back
    front_text_color = "black" if new_front_color == "#ee6b6e" else "white"       # Text color for readability
    back_text_color = "white" if new_back_color == "#2980b9" else "black"

    # Apply the new colors to the cards
    html_content = re.sub(
        r'flip-card-front[^>]*background-color:[^;]*;',
        f'flip-card-front {{ background-color: {new_front_color}; color: {front_text_color};',
        html_content
    )
    html_content = re.sub(
        r'flip-card-back[^>]*background-color:[^;]*;',
        f'flip-card-back {{ background-color: {new_back_color}; color: {back_text_color}; transform: rotateX(900deg);',
        html_content
    )

    # Step 7: Save the new front color for next time
    config["last_front_color"] = new_front_color
    with open("config.json", "w") as config_file:
        json.dump(config, config_file, indent=4)

    # Step 8: Write the updated HTML to the file
    with open("index.html", "w", encoding='utf-8') as html_file:
        html_file.write(html_content)
    print("Finished updating the HTML file!")

    # Step 9: Show the updated HTML snippet
    with open("index.html", "r", encoding='utf-8') as html_file:
        updated_html = html_file.read()
    print(f"New HTML snippet (after changes): {updated_html[updated_html.index('id=\"Qoos1\"'):updated_html.index('id=\"Qoos12\"')+50]}")

def second_page(page, data=None, url_input=None, result_text=None, submit_button=None, next_page_button=None, data_list_view=None):
    print("Rendering second page...")
    total_interviews, checked_in, npg = get_checkin_data()
    
    checked_in, df = update_checked_in_number(None)
    total_interviews = 826
    
    init_time_serial = get_init_time()
    init_time_display = excel_to_datetime(init_time_serial) if init_time_serial else "Not Set"
    data_text = ft.Text("No Google Sheet data available") if data is None or data.empty else ft.Text(f"Loaded {len(data)} rows from Google Sheet")

    with open("config.json", "r") as f:
        config = json.load(f)
    interviewed = config.get("interviewed", [])
    current_lineup = config.get("current_lineup", [])
    lineup_history = config.get("lineup_history", [])
    group_number = len(lineup_history)

    progress_container = ft.Container(
        content=ft.Column(
            [ft.Text("Check-in Status", size=20, weight="bold"), create_progress_bar(total_interviews, checked_in)],
            spacing=10,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        ),
        padding=10,
        border=ft.border.all(1, ft.Colors.GREY_400),
        border_radius=5,
        width=page.width / 3,
        alignment=ft.alignment.center,
    )

    current_lineup_display = ft.Column(
        [ft.Text(f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}") for person in current_lineup] if current_lineup else [ft.Text("No current lineup")],
        spacing=5
    )

    def on_lineup_click(e):
        print("Lineup button clicked...")
        with open("config.json", "r") as f:
            config = json.load(f)
        current_npg = config["npg"]
        print(f"Using npg={current_npg} for lineup")

        new_checked_in, df = update_checked_in_number(None)
        if isinstance(df, str):
            print(f"Failed to fetch sheet: {df}")
            current_lineup_display.controls = [ft.Text("Failed to fetch lineup", color=ft.colors.RED)]
        else:
            next_group = get_next_lineup(df, current_npg, interviewed)
            if not next_group:
                current_lineup_display.controls = [ft.Text("No more people to line up", color=ft.colors.RED)]
            else:
                group_number = len(config.get("lineup_history", [])) + 1
                current_lineup[:] = next_group
                interviewed.extend([person["No"] for person in next_group])
                config["current_lineup"] = current_lineup
                config["interviewed"] = interviewed
                lineup_history.append({
                    "group_number": group_number,
                    "people": next_group,
                    "npg": current_npg
                })
                config["lineup_history"] = lineup_history
                with open("config.json", "w") as f:
                    json.dump(config, f, indent=4)
                
                with open('data.json', 'r') as f:
                    data = json.load(f)
                for person in next_group:
                    data['line'].append(person["No"])
                data['npg'].append(current_npg)
                with open('data.json', 'w') as f:
                    json.dump(data, f, indent=4)

                current_lineup_display.controls = [ft.Text(f"No: {person['No']} - {person['中文姓名']} - {person['timevalue']}") for person in current_lineup]
                progress_container.content = ft.Column(
                    [ft.Text("Check-in Status", size=20, weight="bold"), create_progress_bar(total_interviews, new_checked_in)],
                    spacing=10,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                )
                print(f"Group #{group_number} added to history: {[person['No'] for person in next_group]}")
                write_html()
        page.update()

    return ft.Column(
        [
            ft.Row(
                [
                    progress_container,
                    ft.Container(
                        content=ft.Column(
                            [
                                ft.Text("Number of people per group", size=16, weight="bold"),
                                ft.Row(
                                    [
                                        ft.Slider(
                                            min=0,
                                            max=6,
                                            value=npg,
                                            on_change=lambda e: [update_config_npg(e.control.value), e.control.parent.controls[1].__setattr__('value', str(int(e.control.value))), page.update()],
                                            width=200,
                                        ),
                                        ft.Text(str(npg)),
                                    ],
                                    alignment=ft.MainAxisAlignment.CENTER,
                                    spacing=10,
                                ),
                            ],
                            spacing=10,
                            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        ),
                        padding=10,
                        border=ft.border.all(1, ft.Colors.GREY_400),
                        border_radius=5,
                        width=page.width / 3,
                        alignment=ft.alignment.center,
                    ),
                    ft.Container(
                        content=ft.Column(
                            [
                                ft.Text("Start Time", size=16, weight="bold"),
                                ft.TextField(
                                    label="(YYYY-MM-DD HH:MM:SS)",
                                    value=init_time_display,
                                    on_change=lambda e: update_config_init_time(e.control.value),
                                    width=200,
                                ),
                            ],
                            spacing=10,
                        ),
                        padding=10,
                        border=ft.border.all(1, ft.Colors.GREY_400),
                        border_radius=5,
                        width=page.width / 3,
                        alignment=ft.alignment.center,
                    ),
                ],
                alignment=ft.MainAxisAlignment.START,
                vertical_alignment=ft.CrossAxisAlignment.START,
                expand=True,
            ),
            ft.Container(
                content=ft.Column(
                    [
                        ft.Text("Current Lineup", size=16, weight="bold"),
                        current_lineup_display,
                    ],
                    spacing=10,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                padding=10,
                border=ft.border.all(1, ft.Colors.GREY_400),
                border_radius=5,
                width=500,
            ),
            ft.Container(
                content=ft.Row(
                    [
                        ft.ElevatedButton(
                            text="Lineup",
                            bgcolor="blue",
                            on_click=on_lineup_click,
                            width=200,
                            height=60,
                            style=ft.ButtonStyle(padding=20),
                        ),
                        ft.ElevatedButton(
                            text="Open HTML",
                            bgcolor="green",
                            on_click=lambda e: webbrowser.open(f"file://{os.getcwd()}/index.html", new=0, autoraise=True),
                            width=200,
                            height=60,
                            style=ft.ButtonStyle(padding=20),
                        ),
                        ft.ElevatedButton(
                            text="Go Back to First Page",
                            bgcolor="red",
                            on_click=lambda e: page.clean() or page.add(first_page(page, url_input, result_text, submit_button, next_page_button, data_list_view)),
                            width=200,
                            height=60,
                            style=ft.ButtonStyle(padding=20),
                        ),
                    ],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=20,
                ),
                padding=10,
                alignment=ft.alignment.center,
                expand=True,
            ),
        ],
        alignment=ft.MainAxisAlignment.START,
        horizontal_alignment=ft.CrossAxisAlignment.STRETCH,
        expand=True,
    )